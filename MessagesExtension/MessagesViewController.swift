//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Trần Vũ Hưng on 11/22/17.
//  Copyright © 2017 Tran Vu Hung. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(forConversation: conversation, withPresentationStyle: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        if let conversation = activeConversation{
            presentViewController(forConversation: conversation, withPresentationStyle: presentationStyle)
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}

//MARK: - Child View Controllers
extension MessagesViewController{
    func switchTo(viewcontroller controller: UIViewController){
        //Remove any existing child view controller
        for child in childViewControllers{
            child.willMove(toParentViewController: .none)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        //Add the new child view controller
        addChildViewController(controller)
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: topLayoutGuide.bottomAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)])
        controller.didMove(toParentViewController: self)
    }
    
    func instantiateSummaryViewController(game: DrawPicGame?) -> UIViewController{
        guard let viewController = storyboard?.instantiateViewController(withIdentifier: "summaryVC") as? SummaryViewController else {
            fatalError("Unable to instantiate a summary view controller")
        }
        viewController.game = game
        viewController.delegate = self
        return viewController
    }
    
    func instantiateDrawingViewController(game: DrawPicGame?) -> UIViewController{
        guard let viewController = storyboard?.instantiateViewController(withIdentifier: "drawingVC") as? DrawingViewController else {
            fatalError("Unable to instantiate a drawing view controller")
        }
        viewController.game = game
        viewController.delegate = self
        return viewController
    }
    
    func presentViewController(forConversation conversation: MSConversation, withPresentationStyle style: MSMessagesAppPresentationStyle){
        let controller: UIViewController
        //TODO: Create the right viewcontroller here
        switch style{
        case .compact:
            controller = instantiateSummaryViewController(game: nil)
        case .expanded:
            let newGame = DrawPicGame.newGame(drawerId: conversation.localParticipantIdentifier)
            controller = instantiateDrawingViewController(game: newGame)
        }
        switchTo(viewcontroller: controller)
    }
}

//MARK: - Summary View Controller Delegate
extension MessagesViewController: SummaryViewControllerDelegate {
    func handleSummaryTap(forGame game: DrawPicGame?) {
        requestPresentationStyle(MSMessagesAppPresentationStyle.expanded)
    }
}

//MARK: - Send messages
extension MessagesViewController{
    func composeMessages(with game: DrawPicGame, caption: String, session: MSSession? = .none) -> MSMessage{
        let layout = MSMessageTemplateLayout()
        layout.image = game.currentDrawing
        layout.caption = caption
        let message = MSMessage(session: session ?? MSSession())
        message.layout = layout
        return message
    }
}
//MARK: - DrawingViewControllerDelegate
extension MessagesViewController: DrawingViewControllerDelegate{
    func handleDrawingComplete(game: DrawPicGame?) {
        defer {
            dismiss()
        }
        guard let conversation = activeConversation, let game = game else {return}
        let message = composeMessages(with: game, caption: "Guess my Draw", session: conversation.selectedMessage?.session)
        conversation.insert(message) { (error) in
            if let error = error{
                print(error)
            }
        }
    }
}
